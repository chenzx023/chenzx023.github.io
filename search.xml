<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode笔记</title>
    <url>/2020/08/19/leetcode%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>在下惭愧算法巨垃圾还有文案也不怎么样 简简单单做个笔记 记录自己的学习</p>
</blockquote>
<h2 id="Pow-x-n"><a href="#Pow-x-n" class="headerlink" title="Pow(x, n)"></a>Pow(x, n)</h2><ol>
<li>第一种方法（这种方法比较耗内存） <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span> (<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        result *= x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>第二种方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myPow = <span class="function"><span class="keyword">function</span> (<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / myPow(x, -n)</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span>) <span class="keyword">return</span> x * myPow(x, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> myPow(x * x, n / <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      n += num</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      n = num</span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = [], numHash = &#123;&#125;, middleLen = <span class="built_in">parseInt</span>(nums.length / <span class="number">2</span>);</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!numHash[item] || numHash[item] !== <span class="number">-1</span>) &#123;</span><br><span class="line">            numHash[item] = numHash[item] ? numHash[item] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numHash[item] &gt; middleLen) &#123;</span><br><span class="line">            numHash[item] = <span class="number">-1</span>;</span><br><span class="line">            res.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot项目整合mybatis</title>
    <url>/2020/05/28/springboot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88mybatis/</url>
    <content><![CDATA[<p>今天这篇我们将具体说说如何在<font color=#e96900><code>Spring Boot</code></font>中整合<font color=#e96900><code>MyBatis</code></font>完成关系型数据库的增删改查操作。</p>
<p>学习<font color=#e96900><code>Mybatis</code></font>我们先来了解一下什么<font color=#e96900><code>ORM</code></font>，<font color=#e96900><code>ORM</code></font>即<font color=#e96900><code>Object-Relationl Mapping</code></font>，它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的<font color=#e96900><code>SQL</code></font>语句打交道，只要像平时操作对象一样操作它就可以了 。</p>
<p>下面我介绍一款在国内使用量比较多的<font color=#e96900><code>ORM</code></font>框架，它就是<font color=#e96900><code>Mybatis</code></font>。</p>
<h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><h5 id="1-创建好一个springboot项目后，首先在pom-xml配置文件引入MyBatis以及MySQL-Connector"><a href="#1-创建好一个springboot项目后，首先在pom-xml配置文件引入MyBatis以及MySQL-Connector" class="headerlink" title="1.  创建好一个springboot项目后，首先在pom.xml配置文件引入MyBatis以及MySQL Connector"></a>1.  创建好一个springboot项目后，首先在pom.xml配置文件引入MyBatis以及MySQL Connector</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于<font color=#e96900><code>mybatis-spring-boot-starter</code></font>的版本需要注意：</p>
<ul>
<li><p><font color=#e96900><code>2.1.x</code></font>版本适用于：Mybatis3.5+、Java8+、Spring Boot 2.1+</p>
</li>
<li><p><font color=#e96900><code>2.0.x</code></font>版本适用于：Mybatis3.5+、Java8+、Spring Boot 2.0/2.1</p>
</li>
<li><p><font color=#e96900><code>1.3.x</code></font>版本适用于：Mybatis3.4+、Java6+、Spring Boot1.5</p>
</li>
</ul>
<p>其中，目前还在维护的版本是2.1.x和1.3.x</p>
<h5 id="2-在resources目录下创建-application-properties文件"><a href="#2-在resources目录下创建-application-properties文件" class="headerlink" title="2. 在resources目录下创建 application.properties文件"></a>2. 在resources目录下创建 <font color=#e96900><code>application.properties</code></font>文件</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  <span class="comment">#mysql驱动</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span>  <span class="comment">#url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment"># 数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment">#数据库密码</span></span><br></pre></td></tr></table></figure>

<h5 id="3-Mysql-中创建一张用来测试的表，比如：-User表。"><a href="#3-Mysql-中创建一张用来测试的表，比如：-User表。" class="headerlink" title="3. Mysql 中创建一张用来测试的表，比如： User表。"></a>3. Mysql 中创建一张用来测试的表，比如： User表。</h5><pre><code>具体创建命令如下：</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<h5 id="4-创建User表的映射对象User"><a href="#4-创建User表的映射对象User" class="headerlink" title="4. 创建User表的映射对象User"></a>4. 创建User表的映射对象User</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">    ...这里省略get、set方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-创建User表的操作接口：UserMapper。在接口中定义两个数据操作，一个插入。一个查询，用于后续验证。"><a href="#5-创建User表的操作接口：UserMapper。在接口中定义两个数据操作，一个插入。一个查询，用于后续验证。" class="headerlink" title="5.  创建User表的操作接口：UserMapper。在接口中定义两个数据操作，一个插入。一个查询，用于后续验证。"></a>5.  创建User表的操作接口：UserMapper。在接口中定义两个数据操作，一个插入。一个查询，用于后续验证。</h5> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@Select</span>(&#123;<span class="string">"select * from user"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 插入一条用户信息</span></span><br><span class="line">    <span class="meta">@Insert</span>(&#123;<span class="string">"insert into user (name, age) values (#&#123;name&#125;, #&#123;age&#125;)"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">User</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-创建User表的操作服务接口-UserService。"><a href="#6-创建User表的操作服务接口-UserService。" class="headerlink" title="6. 创建User表的操作服务接口: UserService。"></a>6. 创建User表的操作服务接口: UserService。</h5><blockquote>
<p>好处：封装Service层的业务逻辑有利于业务逻辑的独立性和重复利用性。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">createUser</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-创建UserService接口的实现类"><a href="#7-创建UserService接口的实现类" class="headerlink" title="7. 创建UserService接口的实现类"></a>7. 创建UserService接口的实现类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> UserMapper usermapper;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usermapper.selectUserList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usermapper.createUser(name, age);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-创建控制器。具体如下"><a href="#8-创建控制器。具体如下" class="headerlink" title="8. 创建控制器。具体如下"></a>8. 创建控制器。具体如下</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.selectUserList();</span><br><span class="line">        <span class="keyword">return</span> Result.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"createUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">createUser</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">":"</span>+age);</span><br><span class="line">        <span class="keyword">int</span> result = userService.createUser(name, age);</span><br><span class="line">        <span class="keyword">return</span> Result.success(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Result 可自己封装一个结果统一返回工具类</li>
</ul>
<p>代码具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误码</span></span><br><span class="line">    <span class="keyword">private</span> String  code;</span><br><span class="line">    <span class="comment">// 错误返回信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">// 返回结果集</span></span><br><span class="line">    <span class="keyword">private</span> Object data  = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    ...这里省略get、set方法</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(<span class="string">"0"</span>);</span><br><span class="line">        result.setMsg(<span class="string">"操作成功"</span>);</span><br><span class="line">        result.setData(object);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(String msg, Object data)</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(<span class="string">"0"</span>);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Result <span class="title">error</span><span class="params">(String msg, Object data)</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(<span class="string">"-1"</span>);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="注解配置说明"><a href="#注解配置说明" class="headerlink" title="注解配置说明"></a>注解配置说明</h2><h4 id="使用-Param"><a href="#使用-Param" class="headerlink" title="使用@Param"></a>使用@Param</h4><p>在之前的整合实例中我们已经使用了这种简单 的传参方式，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(&#123;<span class="string">"insert into user (name, age) values (#&#123;name&#125;, #&#123;age&#125;)"</span>&#125;)</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">createUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br></pre></td></tr></table></figure>

<p>这种方式很好理解，<font color=#e96900><code>@Param</code> </font>中定义的<font color=#e96900>name</font>对应了Sql中的<font color=#e96900>#{name}</font>，<font color=#e96900>age</font>对应了Sql中的<font color=#e96900>#{age}</font></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的环境搭建</title>
    <url>/2020/01/29/vue%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="1-vue介绍"><a href="#1-vue介绍" class="headerlink" title="1.vue介绍"></a>1.vue介绍</h2><ul>
<li>vue是目前最火的一个前端框架</li>
<li>vue是前端主流框架之一，和angular、react 一起，并成为前端三大主流框架！</li>
<li>vue是一套构建于用户界面的框架，<font face="黑体">只关注与视图层</font>，他不仅易于上手，还便于与第三方库或既有项目整合</li>
<li>前端的主要工作？例如mvc架构中的v的一层，主要工作就是和界面打交道，来制作前端页面效果</li>
</ul>
<blockquote>
<p>下面进行vue的安装 👇</p>
</blockquote>
<h2 id="2-安装vue命令行工具"><a href="#2-安装vue命令行工具" class="headerlink" title="2.安装vue命令行工具"></a>2.安装vue命令行工具</h2><ul>
<li>安装vue-cli命令行工具 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli or yarn global add @vue/cli</span><br></pre></td></tr></table></figure></li>
<li>查看已安装版本 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ vue --version  or vue -V</span><br></pre></td></tr></table></figure></li>
<li>卸载vue命令行工具 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm uninstall @vue/cli -g</span><br></pre></td></tr></table></figure></li>
<li>新建项目 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ vue create my-project</span><br></pre></td></tr></table></figure></li>
<li>项目启动 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm run serve</span><br></pre></td></tr></table></figure></li>
<li>打包项目 👇👇<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>





</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>js</tag>
        <tag>hexo</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个hexo</title>
    <url>/2019/12/27/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAhexo/</url>
    <content><![CDATA[<h2 id="hexo-是什么？"><a href="#hexo-是什么？" class="headerlink" title="hexo 是什么？"></a>hexo 是什么？</h2><p>Hexo 是一个基于node快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用好看的主题生成静态网页。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我们会尽力解决您的问题。</p>
<h3 id="安装的必要条件"><a href="#安装的必要条件" class="headerlink" title="安装的必要条件"></a>安装的必要条件</h3><p>hexo的安装是非常简单的，首先列出安装需要的安装包</p>
<ul>
<li>Node.js(Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li>
<li>Git</li>
</ul>
<p>如果你的电脑已经安装了上述软件，那么恭喜你！你可以直接前往安装hexo步骤。</p>
<p>如果你的电脑还没安装，请按照以下步骤操作</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul>
<li>Windows：下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></li>
<li>Max：使用<a href="mxcl.github.com/homebrew/">Homebrew</a>，或者直接下载<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">git</a>安装</li>
<li>Linux (Ubuntu, Debian)：sudo apt-get install git</li>
<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git</li>
</ul>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>node.js为大多数平台提供了<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">安装程序</a>。中国大陆地区用户，还可以直接前往 <a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a>  下载。</p>
<ul>
<li>Mac：还可以使用<a href="mxcl.github.com/homebrew/">Homebrew</a>安装node.js</li>
<li>Linux (Ubuntu, Debian)：sudo apt-get update sudo apt-get install nodejs</li>
<li>Linux (Fedora, Red Hat, CentOS)： sudo yum update sudo yum install nodejs</li>
</ul>
<blockquote>
<p>Windows用户<br>使用node.js官方安装程序的时候，请注意确保勾选add to path选项（默认已经勾选）</p>
</blockquote>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在所有的node必备需求安装完成后，既可使用npm安装hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此！hexo安装的操作已经完成</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>js</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
